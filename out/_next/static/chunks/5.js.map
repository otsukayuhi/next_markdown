{"version":3,"file":"static/chunks/5.js","sources":["webpack:///./src/markdown/react-next.md"],"sourcesContent":["export default \"# React / Next.jsとは？\\n\\n## Reactとは？\\n\\nReactとは、Facebookが作ったユーザーインターフェイスを構築するためのJavaScriptライブラリ。  \\n宣言的なViewをコンポーネントベースで作ることができる。\\n\\n公式サイト：https://ja.reactjs.org/\\n\\n## Next.jsとは？\\n\\nNext.jsとは、Reactでサーバーサイドレンダリングをするためのフレームワーク。  \\nVue.jsで言うところの、Nuxt.js。簡単にルーティングできて、静的サイトの書き出しもできる。\\n\\n公式サイト：https://nextjs.org/\\n\\n# Next.jsでWebサイトをつくってみよう！\\n\\n## Next.jsの使い方\\n\\n必要なパッケージをインストール\\n\\n- next\\n- react\\n- react-dom\\n\\n```console\\n$ npm i next react react-dom\\n```\\n\\n`package.json`に`scripts`を追記。\\n\\n```json\\n{\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"next\\\"\\n  }\\n}\\n```\\n\\n`./pages`ディレクトリに`index.js`を追加。\\n\\n```console\\n$ mkdir pages\\n$ touch pages/index.js\\n```\\n\\n```javascript\\n// pages/index.js\\nexport default () => <h1>Hello, Next.js!</h1>\\n```\\n\\nローカルサーバーを起動。\\n\\n```console\\n$ npm run dev\\n```\\n\\n`http://localhost:3000`にアクセスして、`Hello, Next.js!`が表示されていれば、OK！\\n\\n## ディレクトリ構成\\n\\n- `./pages` ルーティングの対象\\n- `./static` 静的ファイルの置き場所\\n  - 画像ファイルとか\\n\\nディレクトリのルールが決まっているのは、これくらい。\\n\\n## JSXの書き方\\n\\n`pages/index.js`を、省略形なしの形に変更。\\n\\n```javascript\\nimport React from 'react' // Next.jsでは省略可能\\n\\n// returnでJSXを返す関数をコンポーネントと呼ぶ\\nconst Index = () => {\\n  return <h1>Hello, Next.js!</h1>\\n}\\n\\n// ES Modules\\n// 本来は import されて react-dom がレンダリングするが、Next.jsでは隠蔽されている\\nexport default Index\\n```\\n\\nJSXで子要素を使う。\\n\\n```javascript\\nimport React from 'react'\\n\\nconst Index = () => {\\n  // ()で括り、;の自動挿入に対応\\n  // returnで返すJSXは必ず1つの要素\\n  return (\\n    <div>\\n      <h1>Hello, Next.js!</h1>\\n    </div>\\n  )\\n}\\n\\nexport default Index\\n```\\n\\n`JSX`内は`{}`でJavaScriptを使う。\\n\\n```javascript\\nimport React from 'react'\\n\\nconst Index = () => {\\n  const text = 'Next.js!'\\n  return (\\n    <div>\\n      {/* コメントアウト */}\\n      <h1>{`Hello, ${text}`}</h1>\\n    </div>\\n  )\\n}\\n\\nexport default Index\\n```\\n\\nコンポーネントをJSX内で使う。\\n\\n```javascript\\nimport React from 'react'\\n\\n// 見出し用のコンポーネント\\nconst Heading = props => {\\n  // 属性の値は、オブジェクトのプロパティとして渡される\\n  return <h1>{props.text}</h1>\\n}\\n\\nconst Index = () => {\\n  const text = 'Next.js!'\\n  return (\\n    <div>\\n      {\\n        /**\\n        * コンポーネントの属性でテキストを渡す\\n        * これをProps（プロップス）と呼ぶ\\n        */\\n       }\\n      <Heading text={`Hello, ${text}`} />\\n    </div>\\n  )\\n}\\n\\nexport default Index\\n```\\n\\n子要素を渡す。\\n\\n```javascript\\nimport React from 'react'\\n\\n// Propsはオブジェクトなので、分割代入が使える\\nconst Heading = ({ children }) => {\\n  // childrenで子要素を受け取る\\n  return <h1>{children}</h1>\\n}\\n\\nconst Index = () => {\\n  const text = 'Next.js!'\\n\\n  return (\\n    <div>\\n      {/* コンポーネントの子要素でspan要素を渡す */}\\n      <Heading>\\n        <span>{`Hello, ${text}`}</span>\\n      </Heading>\\n    </div>\\n  )\\n}\\n\\nexport default Index\\n```\\n\\n`div`がいらねえとき。\\n\\n```javascript\\nimport React from 'react'\\n\\nconst Heading = ({ children }) => {\\n  return <h1>{children}</h1>\\n}\\n\\nconst Index = () => {\\n  const text = 'Next.js!'\\n  // React.Fragmentを使うとその要素はレンダリングされない\\n  return (\\n    <React.Fragment>\\n      <Heading>\\n        <span>{`Hello, ${text}`}</span>\\n      </Heading>\\n      <p>divでラップしたないねん</p>\\n    </React.Fragment>\\n  )\\n}\\n\\nexport default Index\\n```\\n\\n`div`がいらねえとき2。\\n\\n```javascript\\nimport React from 'react'\\n\\nconst Heading = ({ children }) => {\\n  return <h1>{children}</h1>\\n}\\n\\nconst Index = () => {\\n  const text = 'Next.js!'\\n  // <React.Fragment></React.Fragment>は<></>とも書ける\\n  return (\\n    <>\\n      <Heading>\\n        <span>{`Hello, ${text}`}</span>\\n      </Heading>\\n      <p>divでラップしたないねん</p>\\n    </>\\n  )\\n}\\n\\nexport default Index\\n```\\n\\nファイルを分けよう！\\n\\n```javascript\\n// components/Heading.js\\n// {} と return を省略できる\\nconst Heading = ({ children }) => <h1>{children}</h1>\\n\\nexport default Heading\\n```\\n\\n```javascript\\n// pages/index.js\\nimport React from 'react'\\nimport Heading from '../components/Heading'\\n\\nconst Index = () => {\\n  const text = 'Next.js!'\\n  return (\\n    <>\\n      <Heading>\\n        <span>{`Hello, ${text}`}</span>\\n      </Heading>\\n      <p>divでラップしたないねん</p>\\n    </>\\n  )\\n}\\n\\nexport default Index\\n```\\n\\nmapで要素の反復処理。\\n\\n```javascript\\n// pages/index.js\\nimport React from 'react'\\nimport Heading from '../components/Heading'\\n\\n// 配列\\nconst member = ['ネズミ', '牛', 'トラ', 'うさぎ']\\n\\nconst Index = () => {\\n  const text = 'Next.js!'\\n  return (\\n    <>\\n      <Heading>\\n        <span>{`Hello, ${text}`}</span>\\n      </Heading>\\n      <ul>\\n        {/*\\n          member配列の要素の数だけ<li>を作成\\n          keyにindexを渡している（ホントはindex以外を渡したい）\\n        */}\\n        {member.map((name, index) => (\\n          <li key={index}>{name}</li>\\n        ))}\\n      </ul>\\n    </>\\n  )\\n}\\n\\nexport default Index\\n```\\n\\n`Link`でルーティング\\nonClickでイベント発火\\n(`getInitialProps`でデータ取得)\\n\""],"mappings":";;;;;;;;;;AAAA;AAAA;;;;A","sourceRoot":""}