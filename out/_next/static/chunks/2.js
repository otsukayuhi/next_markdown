(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[2],{

/***/ "./src/markdown/react.md":
/*!*******************************!*\
  !*** ./src/markdown/react.md ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# React勉強会 #1 - ゆるふわ超入門編 -\n\n## 事前準備と基礎知識\n\n- `Node.js`がインストールされている\n  - [anyenv](https://github.com/anyenv/anyenv)からの`nodenv` or [nodenv](https://github.com/nodenv/nodenv)\n  - [Docker](https://github.com/otsukayuhi/docker_nodejs)で仮想化（大塚作）\n- ES2015+の知識\n  - 定数と変数\n  - テンプレートリテラル\n  - 分割代入\n  - アロー関数\n  - map\n  - スプレッド構文\n  - ES Modules\n\n### 定数と変数\n- 定数 `const`\n  - ブロックスコープの再代入不可な定数\n\n```js\n{\n  const text = 'テキスト';\n  console.log(text); // -> テキスト\n\n  text = '違うテキスト'; // -> Error: \"text\" is read-only\n}\n\nconsole.log(text); // -> ReferenceError: text is not defined\n```\n\n- 変数 `let`\n  - ブロックスコープの再代入可能な変数\n\n```js\n{\n  let num = 0;\n  console.log(num); // -> 0\n\n  num = 1;\n  console.log(num); // -> 1\n}\n\nconsole.log(num); // ReferenceError: num is not defined\n```\n\n- 変数 `var`\n  - ブロックスコープではない変数\n  - `const`と`let`を使っていきましょう \n\n```js\n{\n  var text = 'テキスト';\n}\n\nconsole.log(text); // -> テキスト\n```\n\n### テンプレートリテラル\n\nES5の書き方\n\n```js\nconst age = '11歳';\nconsole.log('私の年齢は' + age + 'です！');\n// -> 私の年齢は11歳です！\n```\n\nテンプレートリテラル\n\n```js\nconst age = '11歳';\nconsole.log(`私の年齢は${age}です！`);\n// -> 私の年齢は11歳です！\n```\n\n### 分割代入\n\n配列\n\n```js\nconst member = ['ネズミ', '牛', 'トラ', 'うさぎ'];\nconst [a, b, c, d] = member;\n\nconsole.log(a); // -> ネズミ\nconsole.log(c); // -> トラ\n```\n\nオブジェクト\n\n```js\nconst person = {\n  name: '大塚',\n  age: 3\n};\n\nconst {name, age} = person;\n\nconsole.log(name); // -> 大塚\nconsole.log(age); // -> 3\n```\n\n### アロー関数\n\n関数宣言\n\n```js\nfunction foo(a, b) {\n  return a + b;\n};\n\nconsole.log(foo(1, 2)); // -> 3\n```\n\nアロー関数\n\n```js\nconst bar = (a, b) => {\n  return a + b;\n};\n\nconsole.log(bar(1, 2)); // -> 3\n```\n\nアロー関数の省略\n\n```js\n// 引数が1つの場合、()を省略できる\n// 返り値のみの場合、{}とreturnを省略できる\nconst text = age => `私の年齢は${age}です！`;\n\nconsole.log(text('11歳')); // -> 私の年齢は11歳です！\n```\n\n引数の分割代入\n\n```js\n// オブジェクトを引数に取る場合、分割代入の記法が使える\nconst text = ({name, age}) => `私の名前は${name}、年齢は${age}歳です！`;\n\nconst person = {\n  name: '大塚',\n  age: 3\n};\n\nconsole.log(text(person)); // -> 私の名前は大塚、年齢は3歳です！\n```\n\n### map\n\n第一引数のcallback関数を、配列の順番通りに各要素に対して1度ずつ呼び出し、その結果から新しい配列を生成する。\n\n```js\nconst member = ['ネズミ', '牛', 'トラ', 'うさぎ'];\n\nconst greeting = member.map((name) => {\n  // nameには'ネズミ'や'牛'が入っている\n  return `${name}です！`;\n});\n\nconsole.log(greeting);\n// -> ['ネズミです！', '牛です！', 'トラです！', 'うさぎです！']\n```\n\n### スプレッド構文\n\n配列\n\n```js\nconst newMember = ['黒猫','三毛猫','茶トラ猫'];\nconst member = ['ネズミ', '牛', 'トラ', ...newMember];\n\nconsole.log(member);\n// -> ['ネズミ', '牛', 'トラ', '黒猫','三毛猫','茶トラ猫']\n```\n\nオブジェクト\n\n```js\nconst addProperty = {\n  country: 'Japan',\n  hobby: 'music'\n}\n\nconst person = {\n  name: '大塚',\n  age: 3,\n  ...addProperty\n};\n\nconsole.log(person);\n// -> {name: '大塚', age: 3, country: 'Japan', hobby: 'music'}\n```\n\n関数の可変長引数\n\n```js\nconst greeting = (...member) => member.map(name => `私は${name}です！`);\n\nconsole.log(greeting('ネズミ', '牛', 'トラ', 'うさぎ'));\n// -> ['私はネズミです！', '私は牛です！', '私はトラです！', '私はうさぎです！']\n```\n\n### ES Modules\n\n`export default` でデータを、グローバルオブジェクトに追加することなく、他のJavaScriptファイルへ出力できます。  \n\n```js\n// foo.js\nexport default 'テキスト';\n```\n\n```js\n// index.js\nimport foo from \"./foo\";\n\nconsole.log(foo); // テキスト\n```\n\nこれでもOK。\n\n```js\n// foo.js\nconst text = 'テキスト';\n\nexport default text;\n```\n\n```js\n// index.js\n// textじゃなくてもOK\nimport foo from \"./foo\";\n\nconsole.log(foo); // テキスト\n```\n\n複数`export`する場合。\n\n```js\n// foo.js\n// 数値\nexport const num = 1;\n\n// 配列\nexport const member = ['ネズミ', '牛'];\n\n// オブジェクト\nexport const person = {\n  name: '大塚',\n  age: 3\n};\n\n// 関数\nexport const foo = (a, b) => a + b;\n```\n\n```js\n// index.js\nimport { num, member, person, foo } from \"./foo\";\n\nconsole.log(num); // 1\nconsole.log(member); // ['ネズミ', '牛']\nconsole.log(person); // { name: '大塚', age: 3 }\nconsole.log(foo(1, 2)); // 3\n```\n\n`* as moduleName`で、まとめることもできる。\n\n```js\n// index.js\nimport * as fooModule from \"./foo\";\n\n// fooModuleにオブジェクト形式で格納されている\nconst { num, member, person, foo } = fooModule;\n\nconsole.log(num); // 1\nconsole.log(member); // ['ネズミ', '牛']\nconsole.log(person); // { name: '大塚', age: 3 }\nconsole.log(foo(1, 2)); // 3\n```\n\n```js\n// index.js\n// num を number に変えている\nimport { num as number } from \"./foo\";\n\nconsole.log(number); // 1\n```\n\n`export default`と`export`は併用できる。\n\n```js\n// foo.js\n// 数値\nexport const num = 1;\n\n// 配列\nexport const member = ['ネズミ', '牛'];\n\n// オブジェクト\nexport const person = {\n  name: '大塚',\n  age: 3\n};\n\n// 関数 (export default)\nconst foo = (a, b) => a + b;\n\nexport default foo;\n```\n\n```js\n// index.js\nimport foo, { num, member, person } from \"./foo\";\n\nconsole.log(num); // 1\nconsole.log(member); // ['ネズミ', '牛']\nconsole.log(person); // { name: '大塚', age: 3 }\nconsole.log(foo(1, 2)); // 3\n```\n\nこれもOK。\n\n```js\n// index.js\nimport foo, * as fooModule from \"./foo\";\n\nconst { num, member, person } = fooModule;\n\nconsole.log(num); // 1\nconsole.log(member); // ['ネズミ', '牛']\nconsole.log(person); // { name: '大塚', age: 3 }\nconsole.log(foo(1, 2)); // 3\n```\n\n## React / Next.jsとは？\n\n### Reactとは？\n\nReactとは、Facebookが作ったユーザーインターフェイスを構築するためのJavaScriptライブラリ。  \n宣言的なViewをコンポーネントベースで作ることができる。\n\n公式サイト：https://ja.reactjs.org/\n\n### Next.js\n\nNext.jsとは、Reactでサーバーサイドレンダリングをするためのフレームワーク。  \nVue.jsで言うところの、Nuxt.js。簡単にルーティングできて、静的サイトの書き出しもできる。\n\n公式サイト：https://nextjs.org/\n\n## Next.jsでWebサイトをつくってみよう！\n\n### Next.jsの使い方\n\n必要なパッケージをインストール\n\n- next\n- react\n- react-dom\n\n```console\n$ npm i next react react-dom\n```\n\n`package.json`に`scripts`を追記。\n\n```json\n{\n  \"scripts\": {\n    \"dev\": \"next\"\n  }\n}\n```\n\n`./pages`ディレクトリに`index.js`を追加。\n\n```console\n$ mkdir pages\n$ touch pages/index.js\n```\n\n```javascript\n// pages/index.js\nexport default () => <h1>Hello, Next.js!</h1>\n```\n\nローカルサーバーを起動。\n\n```console\n$ npm run dev\n```\n\n`http://localhost:3000`にアクセスして、`Hello, Next.js!`が表示されていれば、OK！\n\n#### ディレクトリ構成\n\n- `./pages` ルーティングの対象\n- `./static` 静的ファイルの置き場所\n  - 画像ファイルとか\n\nディレクトリのルールが決まっているのは、これくらい。\n\n### JSXの書き方\n\n`pages/index.js`を、省略形なしの形に変更。\n\n```javascript\nimport React from 'react' // Next.jsでは省略可能\n\n// returnでJSXを返す関数をコンポーネントと呼ぶ\nconst Index = () => {\n  return <h1>Hello, Next.js!</h1>\n}\n\n// ES Modules\n// 本来は import されて react-dom がレンダリングするが、Next.jsでは隠蔽されている\nexport default Index\n```\n\nJSXで子要素を使う。\n\n```javascript\nimport React from 'react'\n\nconst Index = () => {\n  // ()で括り、;の自動挿入に対応\n  // returnで返すJSXは必ず1つの要素\n  return (\n    <div>\n      <h1>Hello, Next.js!</h1>\n    </div>\n  )\n}\n\nexport default Index\n```\n\n`JSX`内は`{}`でJavaScriptを使う。\n\n```javascript\nimport React from 'react'\n\nconst Index = () => {\n  const text = 'Next.js!'\n  return (\n    <div>\n      {/* コメントアウト */}\n      <h1>{`Hello, ${text}`}</h1>\n    </div>\n  )\n}\n\nexport default Index\n```\n\nコンポーネントをJSX内で使う。\n\n```javascript\nimport React from 'react'\n\n// 見出し用のコンポーネント\nconst Heading = props => {\n  // 属性の値は、オブジェクトのプロパティとして渡される\n  return <h1>{props.text}</h1>\n}\n\nconst Index = () => {\n  const text = 'Next.js!'\n  return (\n    <div>\n      {\n        /**\n        * コンポーネントの属性でテキストを渡す\n        * これをProps（プロップス）と呼ぶ\n        */\n       }\n      <Heading text={`Hello, ${text}`} />\n    </div>\n  )\n}\n\nexport default Index\n```\n\n子要素を渡す。\n\n```javascript\nimport React from 'react'\n\n// Propsはオブジェクトなので、分割代入が使える\nconst Heading = ({ children }) => {\n  // childrenで子要素を受け取る\n  return <h1>{children}</h1>\n}\n\nconst Index = () => {\n  const text = 'Next.js!'\n\n  return (\n    <div>\n      {/* コンポーネントの子要素でspan要素を渡す */}\n      <Heading>\n        <span>{`Hello, ${text}`}</span>\n      </Heading>\n    </div>\n  )\n}\n\nexport default Index\n```\n\n`div`がいらねえとき。\n\n```javascript\nimport React from 'react'\n\nconst Heading = ({ children }) => {\n  return <h1>{children}</h1>\n}\n\nconst Index = () => {\n  const text = 'Next.js!'\n  // React.Fragmentを使うとその要素はレンダリングされない\n  return (\n    <React.Fragment>\n      <Heading>\n        <span>{`Hello, ${text}`}</span>\n      </Heading>\n      <p>divでラップしたないねん</p>\n    </React.Fragment>\n  )\n}\n\nexport default Index\n```\n\n`div`がいらねえとき2。\n\n```javascript\nimport React from 'react'\n\nconst Heading = ({ children }) => {\n  return <h1>{children}</h1>\n}\n\nconst Index = () => {\n  const text = 'Next.js!'\n  // <React.Fragment></React.Fragment>は<></>とも書ける\n  return (\n    <>\n      <Heading>\n        <span>{`Hello, ${text}`}</span>\n      </Heading>\n      <p>divでラップしたないねん</p>\n    </>\n  )\n}\n\nexport default Index\n```\n\nファイルを分けよう！\n\n```javascript\n// components/Heading.js\n// {} と return を省略できる\nconst Heading = ({ children }) => <h1>{children}</h1>\n\nexport default Heading\n```\n\n```javascript\n// pages/index.js\nimport React from 'react'\nimport Heading from '../components/Heading'\n\nconst Index = () => {\n  const text = 'Next.js!'\n  return (\n    <>\n      <Heading>\n        <span>{`Hello, ${text}`}</span>\n      </Heading>\n      <p>divでラップしたないねん</p>\n    </>\n  )\n}\n\nexport default Index\n```\n\nmapで要素の反復処理。\n\n```javascript\n// pages/index.js\nimport React from 'react'\nimport Heading from '../components/Heading'\n\n// 配列\nconst member = ['ネズミ', '牛', 'トラ', 'うさぎ']\n\nconst Index = () => {\n  const text = 'Next.js!'\n  return (\n    <>\n      <Heading>\n        <span>{`Hello, ${text}`}</span>\n      </Heading>\n      <ul>\n        {/*\n          member配列の要素の数だけ<li>を作成\n          keyにindexを渡している（ホントはindex以外を渡したい）\n        */}\n        {member.map((name, index) => (\n          <li key={index}>{name}</li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default Index\n```\n\n`Link`でルーティング\nonClickでイベント発火\n(`getInitialProps`でデータ取得)\n\n\n### EmotionでCSS in JS\n\n**Emotion**とは、JavaScriptでCSSスタイルを記述するために設計されたライブラリ。  \n後発ライブラリのため、**styled-component**等の良いとこ取りをしている。\n\n必要なパッケージをインストールしましょ。\n\n- @emotion/styled\n- @emotion/core\n\n```console\n$ npm i @emotion/styled @emotion/core\n```\n\n### 静的ファイルの書き出し\n\n```console\n$ next build\n$ next export\n```");

/***/ })

}]);
//# sourceMappingURL=2.js.map